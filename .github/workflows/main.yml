name: Run all unit tests

on:
  workflow_dispatch:
  push:
    branches: [master, "patches/**"]
  pull_request:
  merge_group:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    # If a push event triggered this workflow, then wait for any existing workflow to complete.
    # All other triggers will cancel any in progress runs.
    cancel-in-progress: ${{ github.event_name != 'push' }}

env:
  NODE_VERSION: "18"
  ALIAS: "ciorg"
  SFDX_VERSION: "@salesforce/cli" # automation fails if this isn't latest
  SFDX_ROOT: "./"

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        name: Checkout force-di
        with:
          submodules: "true"
          token: ${{ secrets.SAGE_PEOPLE_CI_USER_PAT }}

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Salesforce CLI
        run: |
          npm install --global $SFDX_VERSION  
  
      - name: "Authorise DevHub"
        run: |
          echo "${{ secrets.SAGE_PEOPLE_DEVHUB_SERVER_KEY }}" > "server.key"
          sf org login jwt --client-id=${{ secrets.SAGE_PEOPLE_DEVHUB_CONSUMER_KEY }} --username=${{ secrets.SAGE_PEOPLE_DEVHUB_USERNAME }} --jwt-key-file ./server.key --set-default-dev-hub

      # Preview org
      # sfdx force:org:create release=Preview --setdefaultusername --definitionfile src/config/project-scratch-def.json --setalias "${{ env.ALIAS }}" --wait 20 --durationdays 1
      - name: "Create Scratch Org "
        run: |
          sf org create scratch -f config/project-scratch-def.json -a "${{ env.ALIAS }}"

      - name: "Deploy Code to Scratch Org"
        run: |
          sf project deploy start -o "${{ env.ALIAS }}"

      - name: "Run Unit Tests In Scratch Org"
        working-directory: ${{ env.SFDX_ROOT }}
        run: |
          mkdir -p apexTestResults/test
          unittestcommand="sf apex run test  -l RunLocalTests -w 60 -r human -d apexTestResults/test  -o \"${{ env.ALIAS }}\""
          echo "Test command to be run: $unittestcommand"
          echo "Running All Apex Tests"
          bash -c "$unittestcommand" || runFailed="true"
          echo "finished first test run"
          if [[ -f apexTestResults/test/test-result.txt ]]; then #1
            echo "Results found"
            # get list of failed tests | trim for class.test name only
            failed=$(grep -w Fail apexTestResults/test/test-result.txt | grep fHCM2__ | awk {'print $1'})
            echo "Parsed test results"
            echo "$failed"
            if [[ -z "$failed" ]]; then #2
              echo "Tests passed"
              exit 0
            else #2
              echo "Re-running failed tests:"
              echo "$failed"
              # Failed tests: trim namespace | to comma-separated list | trim final comma
              failedTests=$(echo "$failed" | sed s/fHCM2__// | tr '\n' ',' | sed 's/.$//')
              echo "Test command to be run: $unittestcommand --tests \"$failedTests\""
              bash -c "$unittestcommand --tests \"$failedTests\"" || failedAgain="true"
              if [ "${failedAgain}" = "true" ]; then #3
                echo "\n====++++Apex tests Results++++====\n"
                junit "**/apexTestResults/test/*-junit.xml"
                exit 1
              else #3
                exit 0
              fi #3
            fi #2
          else #1
            echo "File apexTestResults/test/test-result.txt not found - tests did not run"
            exit 1			
          fi #1

      - name: "Delete Scratch Org "
        if: ${{success()}}
        run: 
            sf org delete scratch -o "${{ env.ALIAS }}" --noprompt
